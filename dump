def _get_sharepoint_files_structured(limit: int = 50, search: Optional[str] = None):
    """
    Return structured info for frontend table.
    Supports optional search/filter by standard or version.
    """
    try:
        files = []
        entries = sorted(
            Path(SHAREPOINT_DIR).glob("*"),
            key=lambda x: x.stat().st_mtime,
            reverse=True
        )
        for f in entries[:limit]:
            if f.is_file():
                meta = parse_filename_metadata(f.name)
                if not meta:
                    continue
                size_kb = round(f.stat().st_size / 1024, 2)
                meta.update({
                    "size": f"{size_kb} KB",
                    "open_url": f"/api/open-file/{f.name}",
                    "download_url": f"/api/download/{f.name}",
                    "filename": f.name,  # ← The actual filename on disk
                    "renamed_filename": f.name  # ← Add this too for consistency
                })
                # Apply search filter if given
                if search:
                    search_lower = search.lower()
                    if search_lower not in meta["standard"].lower() and search_lower not in meta["version"].lower():
                        continue
                files.append(meta)

        return {"files": files[:limit]}
    except Exception as e:
        return {"error": f"Could not list SharePoint files: {str(e)}"}




<Button
  variant="ghost"
  size="icon"
  onClick={() => handleOpenFile(file.renamed_filename || file.filename || file.name)}
>
  <Eye className="h-4 w-4 text-blue-500" />
</Button>
