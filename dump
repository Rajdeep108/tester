# ---------------------------
# New API endpoints for standard name and URL
# ---------------------------
@router.post("/agent/{id}/standard_name")
async def set_standard_name(id: int, payload: dict):
    """Set the standard name in config"""
    new_standard_name = payload.get("standard_name")
    write_crawler_config(standard_name=new_standard_name)
    await broadcast_status()
    return {"success": True, "standard_name": new_standard_name}

@router.post("/agent/{id}/url")
async def set_url(id: int, payload: dict):
    """Set the monitoring URL in config"""
    new_url = payload.get("url")
    write_crawler_config(url=new_url)
    await broadcast_status()
    return {"success": True, "url": new_url}

@router.get("/monitor/config")
async def get_monitor_config():
    """Get the complete monitor configuration"""
    cfg = read_crawler_config()
    return {
        "active": cfg["crawler_active"],
        "frequency": cfg["crawler_frequency"],
        "url": cfg["crawler_url"],
        "standard_name": cfg["standard_name"]
    }












@router.get("/monitor/status")
async def monitor_status():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT filename, url, status, last_checked FROM files ORDER BY last_checked DESC LIMIT 1")
    row = c.fetchone()
    conn.close()
    cfg = read_crawler_config()
    return [{
        "filename": row[0] if row else None,
        "monitoring_url": cfg["crawler_url"],
        "status": row[2] if row else None,
        "last_checked": row[3] if row else None,
        "frequency": cfg["crawler_frequency"],
        "standard_name": cfg["standard_name"]  # Add standard name
    }]

async def broadcast_status():
    conn = sqlite3.connect(DB_PATH)
    c = conn.cursor()
    c.execute("SELECT filename, url, status, last_checked FROM files ORDER BY last_checked DESC LIMIT 1")
    row = c.fetchone()
    conn.close()
    cfg = read_crawler_config()
    data = {
        "filename": row[0] if row else None,
        "monitoring_url": cfg["crawler_url"],
        "status": row[2] if row else None,
        "last_checked": row[3] if row else None,
        "frequency": cfg["crawler_frequency"],
        "standard_name": cfg["standard_name"]  # Add standard name
    }
    await manager.broadcast({"type": "status", "data": data})







=======================================================================================================









// In your useEffect that fetches initial data:
useEffect(() => {
  // Fetch crawler config (includes standard name and URL)
  fetch('http://localhost:8000/monitor/config')
    .then(res => res.json())
    .then(config => {
      setCrawlerStatus(s => ({ ...s, active: config.active }));
      setBackendFrequency(config.frequency);
      setWorkflows(wfs =>
        wfs.map(w =>
          w.type === '3gpp'
            ? { 
                ...w, 
                isActive: config.active,
                frequency: config.frequency,
                monitoredStandards: [config.standard_name],
                url: config.url
              }
            : w
        )
      );
    });

  // Fetch latest run/status info
  fetch('http://localhost:8000/monitor/status')
    .then(res => res.json())
    .then(arr => {
      if (arr.length) {
        setCrawlerStatus(s => ({
          ...s,
          lastRun: arr[0].last_checked,
          lastStatus: arr[0].status
        }));
      }
    });
}, []);

// Update the saveFrequency function:
const saveFrequency = async () => {
  if (editingId === 1) { // 3GPP agent
    // Save frequency
    await fetch(`http://localhost:8000/agent/${editingId}/frequency`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ frequency: editFrequency }),
    });
    
    // Save standard name
    await fetch(`http://localhost:8000/agent/${editingId}/standard_name`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ standard_name: editStandardName }),
    });
    
    // Save URL
    await fetch(`http://localhost:8000/agent/${editingId}/url`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ url: editUrl }),
    });
    
    // Update local state
    setBackendFrequency(editFrequency);
    setWorkflows(ws =>
      ws.map(w =>
        w.id === editingId
          ? {
              ...w,
              frequency: editFrequency,
              monitoredStandards: [editStandardName],
              url: editUrl
            }
          : w
      )
    );
  }
  setEditingId(null);
};















const workflowsData = [
  {
    id: 1,
    name: '3GPP Standards Monitor',
    description: 'Automatically detect new 3GPP releases and trigger document mapping workflow',
    actionStatus: 'New version detected',
    notifyStakeholder: true,
    lastRun: '2024-06-28 14:30',
    frequency: 15,
    isActive: true,
    monitoredStandards: [''], // Empty initially
    type: '3gpp',
    url: '', // Empty initially
  },
];
