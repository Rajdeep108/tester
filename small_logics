
  "files": [
    {
      "standard": "3GPP TR 23.700-67",
      "version": "V0.3.0",
      "releaseDate": "2025-08",
      "uploadedBy": "Rajdeep",
      "size": "2975.7 KB",
      "open_url": "file:///C:/Users/342534/NTT%20DATA%20North%20America/GenAI%20CoE%20India%20-%20Standards/3GPP%20TR%2023.700-67_V0.3.0_2025-08%23%40.docx",
      "download_url": "file:///C:/Users/342534/NTT%20DATA%20North%20America/GenAI%20CoE%20India%20-%20Standards/3GPP%20TR%2023.700-67_V0.3.0_2025-08%23%40.docx"
    },
    {
      "standard": "3GPP TR 23.700-67",
      "version": "V1.0.0",
      "releaseDate": "2025-09",
      "uploadedBy": "Rajdeep",
      "size": "2977.98 KB",
      "open_url": "file:///C:/Users/342534/NTT%20DATA%20North%20America/GenAI%20CoE%20India%20-%20Standards/3GPP%20TR%2023.700-67_V1.0.0_2025-09%23%40.docx",
      "download_url": "file:///C:/Users/342534/NTT%20DATA%20North%20America/GenAI%20CoE%20India%20-%20Standards/3GPP%20TR%2023.700-67_V1.0.0_2025-09%23%40.docx"
    }
  ]
}




--------------------------------------------------------------------------

import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import {
  FileText, Settings, Eye, X, Brain, Upload, Sun, Moon, Download
} from 'lucide-react';

// Animated blue/teal glassy background
function BackgroundSVG() {
  return (
    <svg className="fixed inset-0 pointer-events-none z-0 w-full h-full" width="100%" height="100%">
      <defs>
        <radialGradient id="bg-gradient-1" cx="50%" cy="50%" r="80%">
          <stop offset="0%" stopColor="#c7d2fe" stopOpacity="0.23" />
          <stop offset="100%" stopColor="#6366f1" stopOpacity="0" />
        </radialGradient>
        <radialGradient id="bg-gradient-2" cx="50%" cy="50%" r="80%">
          <stop offset="0%" stopColor="#bae6fd" stopOpacity="0.18" />
          <stop offset="100%" stopColor="#22d3ee" stopOpacity="0" />
        </radialGradient>
      </defs>
      <circle cx="85%" cy="12%" r="110" fill="url(#bg-gradient-1)" />
      <circle cx="18%" cy="88%" r="100" fill="url(#bg-gradient-2)" />
    </svg>
  );
}

const statsCards = [
  {
    title: 'Total Standards',
    value: '247',
    subtitle: 'in this month',
    icon: FileText,
    iconColor: 'text-blue-500 bg-blue-100 dark:bg-blue-900',
  },
  {
    title: 'Active Workflows',
    value: '8',
    subtitle: 'running',
    icon: Settings,
    iconColor: 'text-blue-500 bg-blue-100 dark:bg-blue-900',
  },
];

// const versionsData = [
//   {
//     version: 'v17.9.0',
//     standard: '3GPP TS 23.501',
//     releaseDate: '2024-06-15',
//     impact: 'major',
//     size: '2.4MB',
//     uploadedBy: 'Harshita Nagaraj Guled',
//   },
//   {
//     version: 'v17.8.0',
//     standard: '3GPP TS 23.501',
//     releaseDate: '2024-03-20',
//     impact: 'minor',
//     size: '2.3MB',
//     uploadedBy: 'Neelambuz Singh',
//   },
//   {
//     version: 'v17.10.0-draft',
//     standard: '3GPP TS 23.501',
//     releaseDate: '2024-07-01',
//     impact: 'major',
//     size: '2.5MB',
//     uploadedBy: 'Rajdeep Roshan Sahu',
//   },
// ];

// const versionDetails = [
//   {
//     id: '3GPP TS 23.501 v17.9.0',
//     standard: '3GPP TS 23.501',
//     version: 'v17.9.0',
//     releaseDate: '2024-06-15',
//     author: '3GPP SA2',
//     size: '2.4 MB',
//     keyChanges: [
//       'Enhanced 5G Core network procedures',
//       'New service continuity mechanisms',
//       'Updated security protocols'],
//     controlPlanePolicies: [
//       "Strict authentication for control messages",
//       "Dynamic resource allocation policy",
//       "Unified session management policy"
//     ],
//   },
//   {
//     id: '3GPP TS 23.501 v17.8.0',
//     standard: '3GPP TS 23.501',
//     version: 'v17.8.0',
//     releaseDate: '2024-03-20',
//     author: '3GPP SA2',
//     size: '2.3 MB',
//     keyChanges: [
//       'Network slicing improvements',
//       'Edge computing enhancements',
//       'Bug fixes for roaming scenarios',
//     ],
//     controlPlanePolicies: [
//       "Legacy control signaling support",
//       "Basic resource allocation policy",
//       "Manual session management policy"],
//   },
//   {
//     id: '3GPP TS 23.501 v17.10.0-draft',
//     standard: '3GPP TS 23.501',
//     version: 'v17.10.0-draft',
//     releaseDate: '2024-07-01',
//     author: '3GPP SA2',
//     size: '2.5 MB',
//     keyChanges: [
//       'Draft: Early 5G Core feature integration',
//       'Planned security updates',
//       'Service orchestration improvements',
//     ],
//     controlPlanePolicies: [
//       "Draft: Dynamic session policy",
//       "Planned unified resource allocation",
//       "Upcoming authentication mechanism"
//     ],
//   },
// ];

// BADGES
const getImpactBadge = (impact: string) => {
  switch (impact) {
    case 'major':
      return (
        <Badge className="bg-gradient-to-r from-blue-500 to-teal-400 text-white font-semibold px-2 border border-blue-400 rounded-full">
          major
        </Badge>
      );
    case 'minor':
      return (
        <Badge className="bg-gradient-to-r from-blue-100 to-teal-100 text-blue-700 font-semibold px-2 border border-blue-200 rounded-full">
          minor
        </Badge>
      );
    default:
      return <Badge className="rounded-full">{impact}</Badge>;
  }
};

// Modal for standard details
function StandardModal({
  open,
  onClose,
  detail,
}: {
  open: boolean;
  onClose: () => void;
  detail: any;
}) {
  if (!open || !detail) return null;
  return (
    <div className="fixed z-50 inset-0 flex items-center justify-center bg-black/30 backdrop-blur-sm">
      <div className="bg-white/90 dark:bg-gray-900/90 rounded-2xl max-w-lg w-full p-7 shadow-2xl border border-blue-100 dark:border-gray-800 relative animate-fade-in">
        <button
          className="absolute top-3 right-3 rounded-full hover:bg-blue-100 dark:hover:bg-gray-800 p-1"
          onClick={onClose}
        >
          <X className="w-6 h-6 text-blue-400" />
        </button>
        <div className="flex items-center gap-3 mb-3">
          <FileText className="h-7 w-7 text-blue-400" />
          <span className="font-extrabold text-2xl text-blue-800 dark:text-blue-100">{detail.standard}</span>
          <span className="ml-auto px-3 py-1 rounded-full bg-gradient-to-r from-blue-100 to-teal-100 dark:from-blue-900 dark:to-teal-900 text-blue-700 dark:text-blue-200 text-xs font-bold">{detail.version}</span>
        </div>
        <div className="text-blue-500 dark:text-blue-300 mb-3 text-sm">
          Released on {detail.releaseDate} by {detail.author}
        </div>
        <div>
          <h4 className="font-medium text-blue-700 dark:text-blue-200 mb-2">Key Changes:</h4>
          <ul className="space-y-1 mb-3">
            {detail.keyChanges.map((change: string, idx: number) => (
              <li key={idx} className="text-sm text-blue-800 dark:text-blue-100 flex items-start gap-2">
                <span className="w-1 h-1 bg-blue-500 rounded-full mt-2 flex-shrink-0"></span>
                {change}
              </li>
            ))}
          </ul>
        </div>
        <div>
          <h4 className="font-medium text-blue-700 dark:text-blue-200 mb-2">New Control-plane Requirements:</h4>
          <ul className="space-y-1">
            {detail.controlPlanePolicies.map((policy: string, idx: number) => (
              <li key={idx} className="text-sm text-blue-800 dark:text-blue-100 flex items-start gap-2">
                <span className="w-1 h-1 bg-blue-500 rounded-full mt-2 flex-shrink-0"></span>
                {policy}
              </li>
            ))}
          </ul>
        </div>
      </div>
    </div>
  );
}

// --- DARK MODE HOOK ---
function usePageDarkMode() {
  const [dark, setDark] = useState(false);

  // On mount: use prefers-color-scheme, then localStorage
  useEffect(() => {
    // First check localStorage
    const stored = localStorage.getItem('standards-darkmode');
    if (stored === 'true') setDark(true);
    else if (stored === 'false') setDark(false);
    else if (window.matchMedia('(prefers-color-scheme: dark)').matches) setDark(true);
  }, []);

  useEffect(() => {
    // Toggle dark class on document.documentElement for this page
    if (dark) document.documentElement.classList.add('dark');
    else document.documentElement.classList.remove('dark');
    localStorage.setItem('standards-darkmode', dark ? 'true' : 'false');
  }, [dark]);

  return [dark, setDark] as const;
}

export default function StandardsManagementPage() {
  const [searchTerm, setSearchTerm] = useState('');
  const [modalDetail, setModalDetail] = useState<any>(null);
  const [modalOpen, setModalOpen] = useState(false);
  const [dark, setDark] = usePageDarkMode();

  const [files, setFiles] = useState<any[]>([]);

  useEffect(() => {
  fetch('http://localhost:8000/api/sharepoint-files')
    .then((res) => res.json())
    .then((data) => setFiles(data.files || []))
    .catch((err) => console.error('Failed to fetch files:', err));
  }, []);

  const filteredVersions = files.filter((file) => {
  return (
    file.standard_name.toLowerCase().includes(searchTerm.toLowerCase()) ||
    file.standard_version.toLowerCase().includes(searchTerm.toLowerCase()) ||
    file.uploaded_by.toLowerCase().includes(searchTerm.toLowerCase())
  );
});

  // Card style
  const cardStyle =
        "hover:shadow-2xl hover:-translate-y-1 transition-all duration-400 bg-white/80 dark:bg-gray-900/80 backdrop-blur rounded-2xl border border-gray-100 dark:border-gray-800";

  return (
    <div className="relative min-h-screen bg-gradient-to-br from-blue-50 via-teal-50 to-white dark:from-gray-950 dark:via-gray-900 dark:to-gray-950 overflow-x-hidden transition-colors duration-500">
      <BackgroundSVG />

      {/* Toggle Button - fixed top right */}
      <button
        aria-label="Toggle dark mode"
        onClick={() => setDark((v) => !v)}
        className={`fixed z-40 top-5 right-6 rounded-full shadow-lg p-2 transition


          ${dark
            ? "bg-blue-900 text-yellow-400 hover:bg-blue-800"
            : "bg-blue-100 text-blue-600 hover:bg-blue-200"}
        `}
        title={dark ? "Switch to light mode" : "Switch to dark mode"}
      >
        {dark ? <Sun className="w-6 h-6" /> : <Moon className="w-6 h-6" />}
      </button>

      <div className="container mx-auto px-4 py-10 max-w-7xl z-10 relative">
        {/* Custom Section Heading */}
        <h1 className="text-4xl font-extrabold bg-gradient-to-r from-blue-600 via-sky-400 to-teal-400 text-transparent bg-clip-text mb-2 flex items-center gap-3 drop-shadow-lg animate-fade-in">
          <Brain className="text-blue-400 animate-spin-slow" size={38} />
          Standards Management Portal
        </h1>
        <p className="text-lg text-gray-600 dark:text-gray-300 mb-10">
          <span className="inline-block bg-gradient-to-r from-blue-100 via-teal-100 to-blue-50 dark:from-blue-900 dark:via-teal-900 dark:to-blue-950 rounded-full px-3 py-1 mr-3 font-semibold text-blue-700 dark:text-blue-200 animate-fade-in">
            <FileText className="inline-block text-blue-400 mr-1" size={16} />
            Monitor & Control
          </span>
          One place for standards insight and version governance
        </p>

        {/* DASHBOARD SECTION */}
        <section className="mb-14">
          <h2 className="text-2xl font-bold text-blue-800 dark:text-blue-200 mb-6 flex items-center gap-2">
            <Settings className="text-blue-400" />
            Standards System Overview
          </h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            {statsCards.map((card, index) => (
              <Card key={index} className={cardStyle}>
                <CardHeader className="pb-4">
                  <div className="flex items-center justify-between">
                    <CardTitle className="text-lg font-medium text-blue-700 dark:text-blue-200">
                      {card.title}
                    </CardTitle>
                    <div className={`p-2 rounded-full ${card.iconColor}`}>
                      <card.icon className="h-6 w-6" />
                    </div>
                  </div>
                </CardHeader>
                <CardContent className="pt-0">
                  <div className="text-3xl font-bold text-blue-900 dark:text-blue-100 mb-1">{card.value}</div>
                  <p className="text-base text-blue-400 dark:text-blue-300">{card.subtitle}</p>
                </CardContent>
              </Card>
            ))}
          </div>
        </section>

        {/* VERSION CONTROL SECTION */}
        <section>
          <h2 className="text-2xl font-bold text-blue-800 dark:text-blue-200 mb-6 flex items-center gap-2">
            <Upload className="text-blue-400" />
            Standards Version Governance
          </h2>
          {/* Filters */}
          <Card className={`${cardStyle} mb-8`}>
            <CardContent className="p-6">
              <label className="text-sm font-medium text-blue-700 dark:text-blue-200 mb-2 block">
                Search Standards or Versions
              </label>
              <Input
                placeholder="Search by name, ID, or version..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full border-blue-200 dark:border-gray-700 focus:ring-blue-300 dark:bg-gray-800 dark:text-blue-100"
              />
            </CardContent>
          </Card>
          {/* Version History Table (Standard first, then Version) */}
          <Card className={cardStyle + " mb-8"}>
            <CardHeader>
              <CardTitle className="flex items-center gap-2 text-lg">
                Version History
                <Badge variant="secondary" className="ml-2 bg-gradient-to-r from-blue-100 to-teal-100 dark:from-blue-900 dark:to-teal-900 text-blue-700 dark:text-blue-200 border border-blue-200 dark:border-blue-900">
                  {filteredVersions.length} versions
                </Badge>
              </CardTitle>
              <p className="text-sm text-blue-400 dark:text-blue-300">
                History of all uploaded versions
              </p>
            </CardHeader>
            <CardContent>
              <div className="overflow-x-auto">
                <table className="w-full">
                  <thead>
                    <tr className="border-b dark:border-gray-700">
                      <th className="text-left py-3 px-4 font-medium text-blue-600 dark:text-blue-200">Standard</th>
                      <th className="text-left py-3 px-4 font-medium text-blue-600 dark:text-blue-200">Version</th>
                      <th className="text-left py-3 px-4 font-medium text-blue-600 dark:text-blue-200">Uploaded By</th>
                      <th className="text-left py-3 px-4 font-medium text-blue-600 dark:text-blue-200">Release Date</th>
                      <th className="text-left py-3 px-4 font-medium text-blue-600 dark:text-blue-200">Size</th>
                      <th className="text-left py-3 px-4 font-medium text-blue-600 dark:text-blue-200">Actions</th>
                    </tr>
                  </thead>
                  <tbody>
                    {filteredVersions.map((file, index) => (
  <tr key={index} className="border-b dark:border-gray-800 hover:bg-gradient-to-r hover:from-blue-50 hover:to-teal-50 dark:hover:from-blue-900 dark:hover:to-teal-900 transition">
    <td className="py-3 px-4 font-medium text-blue-900 dark:text-blue-100">{file.standard_name}</td>
    <td className="py-3 px-4 text-blue-700 dark:text-blue-200">{file.standard_version}</td>
    <td className="py-3 px-4 text-blue-400 dark:text-blue-300 italic">{file.uploaded_by}</td>
    <td className="py-3 px-4 text-blue-400 dark:text-blue-300">{file.release_date}</td>
    <td className="py-3 px-4 text-blue-400 dark:text-blue-300">{file.size_kb}</td>
    <td className="py-3 px-4 flex gap-1">
      <Button
        variant="ghost"
        size="icon"
        onClick={() => {
          setModalOpen(true);
          setModalDetail(file);
        }}
      >
        <Eye className="h-4 w-4 text-blue-500" />
      </Button>
      <Button
        variant="ghost"
        size="icon"
        onClick={() => window.open(file.download_url, '_blank')}
      >
        <Download className="h-4 w-4 text-blue-500" />
      </Button>

                          </td>
                        </tr>
                      ))}
                  </tbody>
                </table>
              </div>
            </CardContent>
          </Card>
        </section>
      </div>
      <StandardModal open={modalOpen} onClose={() => setModalOpen(false)} detail={modalDetail} />
    </div>
  );
}

