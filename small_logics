const validateUploadedFile = async (file: File) => {
  try {
    // Step 1: show validating
    setFiles((prev) =>
      prev.map((f) =>
        f.file === file
          ? {
              ...f,
              validationStatus: "validating",
              validationMessage: "Validating document...",
              validationStep: 2,
            }
          : f
      )
    );

    // Step 2: call backend
    const res = await axios.post(
      "http://localhost:8000/api/validate",
      { filename: file.name },
      { headers: { "Content-Type": "application/json" } }
    );

    // Step 3: update validation result
    setFiles((prev) =>
      prev.map((f) =>
        f.file === file
          ? {
              ...f,
              validationStatus: res.data.is_valid ? "success" : "error",
              validationMessage: res.data.validation_message,
              validationStep: 3,
              ingestionStatus: res.data.is_valid ? "processing" : "idle",
              ingestionMessage: res.data.is_valid
                ? "Ingesting into Vector DB..."
                : "",
            }
          : f
      )
    );

    // Step 4: ingestion result (if valid)
    if (res.data.is_valid) {
      setTimeout(() => {
        setFiles((prev) =>
          prev.map((f) =>
            f.file === file
              ? {
                  ...f,
                  ingestionStatus: res.data.ingested ? "success" : "skipped",
                  ingestionMessage: res.data.ingested
                    ? "Ingested into Vector DB"
                    : "Already exists in Vector DB (skipped)",
                }
              : f
          )
        );
      }, 1200); // smooth delay
    }
  } catch (err: any) {
    setFiles((prev) =>
      prev.map((f) =>
        f.file === file
          ? {
              ...f,
              validationStatus: "error",
              validationMessage:
                err.response?.data?.detail ||
                err.message ||
                "Validation failed",
              validationStep: 3,
              ingestionStatus: "idle",
            }
          : f
      )
    );
  }
};
