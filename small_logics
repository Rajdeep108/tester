import React, { useRef, useState } from "react";
import {
  FileText,
  X,
  Upload,
  AlertTriangle,
  CheckCircle,
  Loader2,
  Search,
  ArrowRight,
  Share2,
  FolderOpen,
  ExternalLink,
  Folder,
  FilePlus2,
} from "lucide-react";
import axios from "axios";

// --- THEMED ANIMATED BACKGROUND SVG ---
function BackgroundSVG() {
  return (
    <svg className="absolute inset-0 pointer-events-none z-0 w-full h-full" width="100%" height="100%">
      <defs>
        <radialGradient id="bg-gradient-1" cx="50%" cy="50%" r="80%">
          <stop offset="0%" stopColor="#c7d2fe" stopOpacity="0.3" />
          <stop offset="100%" stopColor="#38bdf8" stopOpacity="0" />
        </radialGradient>
        <radialGradient id="bg-gradient-2" cx="50%" cy="50%" r="80%">
          <stop offset="0%" stopColor="#a7f3d0" stopOpacity="0.26" />
          <stop offset="100%" stopColor="#0ea5e9" stopOpacity="0" />
        </radialGradient>
      </defs>
      <circle cx="85%" cy="12%" r="110" fill="url(#bg-gradient-1)" />
      <circle cx="18%" cy="88%" r="100" fill="url(#bg-gradient-2)" />
    </svg>
  );
}

type UploadStatus = "idle" | "uploading" | "uploaded" | "type-error" | "upload-error";
type ValidationStatus = "idle" | "validating" | "success" | "error";
type SharePointStatus = "idle" | "syncing" | "success" | "error";

interface FileRecord {
  file: File;
  uploadStatus: UploadStatus;
  uploadMessage: string;
  validationStatus: ValidationStatus;
  validationMessage: string;
  size: number;
  validationStep: number; // 0: not started, 1: uploaded, 2+: validation steps, length+2: done
  ingestionStatus?: "idle" | "processing" | "success" | "skipped" | "error"
  ingestionMessage?: string
}

// --- DYNAMIC VALIDATION STEPS ---
const VALIDATION_STEPS = [
  { key: 1, label: "Checking keywords" },
  { key: 2, label: "Checking document structure" },
  { key: 3, label: "Ingesting into Vector DB" }, //
];

const ACCEPTED_TYPES = ["application/msword", //.doc
                        "application/vnd.openxmlformats-officedocument.wordprocessingml.document" // .docx
];
const SHAREPOINT_FOLDER_PATH = "https://nttdatagroup.sharepoint.com/sites/GenAI-CoE-India";

// --- OPTIONAL: Progress Bar ---
const ValidationProgress = ({ step }: { step: number }) => {
  const percent = step <= 1
    ? 0
    : Math.min(((step - 1) / (VALIDATION_STEPS.length + 1)) * 100, 100);
  return (
    <div className="w-full bg-gray-200 rounded-xl h-2 mt-2 mb-2 overflow-hidden">
      <div
        className="h-2 bg-gradient-to-r from-blue-400 to-teal-400 transition-all duration-700"
        style={{ width: `${percent}%` }}
      ></div>
    </div>
  );
};

// --- MODAL COMPONENT ---
function Modal({ open, onClose, children }: { open: boolean; onClose: () => void; children: React.ReactNode }) {
  if (!open) return null;
  return (
    <div className="fixed inset-0 z-40 flex items-center justify-center bg-black/40 backdrop-blur-sm">
      <div
        className="
          relative
          w-full
          max-w-4xl
          max-h-[95vh]
          rounded-3xl
          p-0
          shadow-2xl
          border
          border-blue-100
          bg-white/90
          animate-fade-in
          flex
          flex-col
        "
        style={{ overflow: 'hidden' }}
      >
        <button
          className="absolute top-6 right-6 z-50 rounded-full hover:bg-blue-100 p-2"
          onClick={onClose}
        >
          <X className="w-7 h-7 text-blue-400" />
        </button>
        <div className="overflow-y-auto max-h-[85vh] p-0">
          {children}
        </div>
      </div>
    </div>
  );
}

export default function DocumentUpload() {
  const [files, setFiles] = useState<FileRecord[]>([]);
  const [sharePointStatus, setSharePointStatus] = useState<SharePointStatus>("idle");
  const [sharePointMessage, setSharePointMessage] = useState<string>("");
  const [modalOpen, setModalOpen] = useState(false);
  const fileInputRef = useRef<HTMLInputElement>(null);

  // --- File Validation ---
  const validateFile = (file: File): string | null => {
    if (
  !(
    ACCEPTED_TYPES.includes(file.type) ||
    file.name.toLowerCase().endsWith(".doc") ||
    file.name.toLowerCase().endsWith(".docx")
  )
) {
      return "Only Standards files are allowed.";
    }
    if (file.size > 50 * 1024 * 1024) return "File must be less than 50MB.";
    return null;
  };

  const handleFiles = (filesList: FileList | null) => {
    if (!filesList) return;
    const arr = Array.from(filesList);
    arr.forEach((file) => {
      const error = validateFile(file);
      if (error) {
        setFiles((prev) => [
          ...prev,
          {
            file,
            uploadStatus: "type-error",
            uploadMessage: error,
            validationStatus: "idle",
            validationMessage: "",
            size: file.size,
            validationStep: 0,
          },
        ]);
        return;
      }
      setFiles((prev) => [
        ...prev,
        {
          file,
          uploadStatus: "uploading",
          uploadMessage: "Uploading...",
          validationStatus: "idle",
          validationMessage: "",
          size: file.size,
          validationStep: 0,
        },
      ]);
      uploadFile(file);
    });
  };

  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    handleFiles(e.dataTransfer.files);
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    handleFiles(e.target.files);
    if (fileInputRef.current) fileInputRef.current.value = "";
  };

  // --- Upload File ---
  const uploadFile = async (file: File) => {
    const data = new FormData();
    data.append("file", file);
    try {
      await new Promise((res) => setTimeout(res, 700));
      await axios.post("http://localhost:8000/api/upload", data, {
        headers: { "Content-Type": "multipart/form-data" },
      });
      setFiles((prev) =>
        prev.map((f) =>
          f.file === file
            ? {
                ...f,
                uploadStatus: "uploaded",
                uploadMessage: "Uploaded successfully!",
                validationStep: 1,
              }
            : f
        )
      );
    } catch (err: any) {
      setFiles((prev) =>
        prev.map((f) =>
          f.file === file
            ? {
                ...f,
                uploadStatus: "upload-error",
                uploadMessage:
                  err.response?.data?.detail ||
                  err.message ||
                  "Upload failed",
              }
            : f
        )
      );
    }
  };

  // --- DYNAMIC VALIDATION STEPS LOGIC ---
  const validateUploadedFile = async (file: File) => {
    for (let i = 0; i < VALIDATION_STEPS.length - 1; i++) {
  setFiles((prev) =>
  prev.map((f) =>
    f.file === file
      ? {
          ...f,
          validationStatus: "validating",
          validationMessage: VALIDATION_STEPS[VALIDATION_STEPS.length - 1].label + "...",
          validationStep: VALIDATION_STEPS.length + 1,
        }
      : f
  )
);
  await new Promise((res) => setTimeout(res, 1000));
}
    try {
      const res = await axios.post(
        "http://localhost:8000/api/validate",
        { filename: file.name },
        { headers: { "Content-Type": "application/json" } }
      );
      setFiles((prev) =>
        prev.map((f) =>
          f.file === file
            ? {
                ...f,
                validationStatus: res.data.is_valid ? "success" : "error",
                validationMessage: res.data.validation_message,
                validationStep: VALIDATION_STEPS.length + 2,
                ingestionStatus: res.data.ingested ? "success" : "skipped",
              }
            : f
        )
      );
    } catch (err: any) {
      setFiles((prev) =>
        prev.map((f) =>
          f.file === file
            ? {
                ...f,
                                validationStatus: "error",
                validationMessage:
                  err.response?.data?.detail ||
                  err.message ||
                  "Validation failed",
                validationStep: VALIDATION_STEPS.length + 2,
              }
            : f
        )
      );
    }
  };

  const removeFile = (file: File) => {
    setFiles((prev) => prev.filter((f) => f.file !== file));
  };

  // --- SharePoint Sync Handler ---
  const handleSharePointSync = async () => {
    setSharePointStatus("syncing");
    setSharePointMessage("Syncing validated documents to SharePoint...");
    try {
      const validatedFiles = files
        .filter((f) => f.validationStatus === "success")
        .map((f) => f.file.name);
      if (validatedFiles.length === 0) {
        setSharePointStatus("error");
        setSharePointMessage("No validated files to sync.");
        return;
      }
      // Implement this endpoint in your backend!
      const res = await axios.post(
        "http://localhost:8000/api/sharepoint-sync",
        { filenames: validatedFiles },
        { headers: { "Content-Type": "application/json" } }
      );
      setSharePointStatus("success");
      setSharePointMessage(
        res.data?.message || "Synced successfully to SharePoint!"
      );
    } catch (err: any) {
      setSharePointStatus("error");
      setSharePointMessage(
        err.response?.data?.detail || err.message || "SharePoint sync failed"
      );
    }
  };

  // --- Card border color for theme ---
  const getCardBorder = (status: UploadStatus | ValidationStatus) => {
    switch (status) {
      case "uploaded":
      case "success":
        return "border-teal-400";
      case "upload-error":
      case "type-error":
      case "error":
        return "border-red-300";
      case "uploading":
      case "validating":
        return "border-blue-300";
      default:
        return "border-gray-100";
    }
  };

  const getSharePointBoxColor = () => {
    switch (sharePointStatus) {
      case "success":
        return "border-teal-400 shadow-teal-100";
      case "error":
        return "border-red-300 shadow-red-100";
      case "syncing":
        return "border-blue-300 shadow-blue-100";
      default:
        return "border-blue-100 shadow-blue-100";
    }
  };

  // --- Card style for glassmorphism ---
  const cardStyle =
    "rounded-2xl border bg-white/80 backdrop-blur shadow-lg transition hover:shadow-2xl hover:-translate-y-1 duration-400";

  return (
    <div className="relative min-h-screen w-full flex flex-col items-center py-10 font-sans bg-gradient-to-br from-blue-50 via-teal-50 to-white overflow-x-hidden">
      <BackgroundSVG />
      <div className="w-full max-w-3xl z-10 relative">
        {/* Unified Heading */}
        <h1 className="text-4xl font-extrabold bg-gradient-to-r from-blue-600 via-sky-400 to-teal-400 text-transparent bg-clip-text mb-2 flex items-center gap-3 drop-shadow-lg animate-fade-in">
          <FilePlus2 className="text-blue-400" size={40} />
          Standards Document Upload
        </h1>
        <p className="text-lg text-gray-600 mb-10">
          <span className="inline-block bg-gradient-to-r from-blue-100 via-teal-100 to-blue-50 rounded-full px-3 py-1 mr-3 font-semibold text-blue-700 animate-fade-in">
            <Folder className="inline-block text-blue-400 mr-1" size={16} />
            Upload & Validate
          </span>
          Seamlessly upload your <span className="font-bold text-blue-500">File</span> standards documents, validate their content, and sync them to your SharePoint repository.
        </p>

        {/* MAIN PAGE - Trigger Modal */}
        <div className="flex flex-col items-center justify-center py-24">
          <button
            onClick={() => setModalOpen(true)}
            className="flex items-center gap-3 px-10 py-4 rounded-2xl bg-gradient-to-r from-blue-600 to-teal-500 text-white text-xl font-bold shadow-xl hover:scale-105 hover:shadow-2xl transition"
          >
            <Upload className="w-7 h-7" />
            Upload & Validate Document
          </button>
          <div className="mt-7 text-gray-500 text-base text-center max-w-xl">
            <div className="flex items-center justify-center mb-2">
              <FileText className="text-teal-400 mr-2" />
              <span>
                Supports <b>Standard</b> files up to <b>50MB</b> in size.
              </span>
            </div>
            <div>
              Upload your latest standard drafts or documents for validation and secure archiving in SharePoint. Follow the simple steps in the popup to get your files processed!
            </div>
          </div>
        </div>

        {/* MODAL */}
        <Modal open={modalOpen} onClose={() => setModalOpen(false)}>
          <div className="flex flex-col md:flex-row gap-0 min-h-[400px]">
            {/* Left side - Icon and Instructions */}
            <aside className="w-full md:w-[300px] bg-gradient-to-br from-blue-50 to-teal-50 rounded-l-3xl px-6 py-12 flex flex-col items-center shadow-xl">
              <div className="bg-gradient-to-br from-blue-200 to-teal-200 p-5 rounded-2xl shadow mb-4">
                <FileText className="w-14 h-14 text-blue-500" />
              </div>
              <div className="text-xl font-extrabold text-blue-700 mb-3 text-center">How It Works</div>
              <ol className="text-gray-700 text-base space-y-5 text-left font-medium">
                <li><span className="font-bold text-blue-500 mr-2">1.</span>Select or <span className="font-bold">drag and drop</span> your <span className="text-blue-500 font-semibold">Files</span> file(s).</li>
                <li><span className="font-bold text-blue-500 mr-2">2.</span>Each file is <span className="font-bold">uploaded</span> and <span className="font-bold">validated</span> in sequence.</li>
                <li><span className="font-bold text-blue-500 mr-2">3.</span>Validated documents can be synced to your SharePoint folder.</li>
              </ol>
            </aside>

            {/* Right side - Steps */}
            <section className="w-full md:flex-1 flex flex-col items-center justify-start px-0 py-10 bg-white rounded-r-3xl">
              <div className="w-full max-w-lg flex flex-col gap-5">
                {/* Upload Card */}
                <div
                  className={`${cardStyle} border-blue-200 flex flex-col items-center py-7 px-5`}
                  onDragOver={e => e.preventDefault()}
                  onDrop={handleDrop}
                >
                  <Upload className="w-10 h-10 text-blue-500 bg-blue-100 p-2 rounded-full shadow-lg shadow-blue-100/50 mb-3" />
                  <div className="text-2xl font-extrabold text-gray-700 mb-1 text-center">
                    Upload <span className="text-blue-500">Standard</span> Files
                  </div>
                  <div className="text-gray-500 mb-3 text-sm">
                    <span className="bg-blue-100 px-2 py-1 rounded text-blue-700 font-medium">Standard</span> only, up to <span className="font-semibold">50MB</span>
                  </div>
                  <button
                    className="inline-flex items-center gap-2 border border-blue-600 bg-gradient-to-r from-blue-500/10 to-teal-400/10 text-blue-700 font-bold px-7 py-2 rounded-xl mt-2 hover:bg-blue-500 hover:text-white transition-all duration-200 shadow"
                    onClick={e => {
                      e.stopPropagation();
                      fileInputRef.current?.click();
                    }}
                  >
                    <Upload className="w-5 h-5" />
                    Select Files
                  </button>
                  <input
                    type="file"
                    multiple
                    accept=".doc, .docx"
                    ref={fileInputRef}
                    className="hidden"
                    onChange={handleFileChange}
                  />
                </div>

                {/* Uploaded Files Card */}
                <div className={`${cardStyle} border-blue-100 px-6 py-5`}>
                  <div className="flex items-center mb-2">
                    <FileText className="mr-2 text-blue-400" />
                                        <span className="font-bold text-base text-gray-700">Uploaded Files</span>
                    <span className="ml-2 text-xs font-normal text-gray-500">({files.length})</span>
                  </div>
                  {files.length === 0 && (
                    <div className="text-gray-400 py-6 text-center text-sm italic rounded-xl bg-white/40 shadow">
                      No files uploaded yet. Start by dropping or selecting a <span className="text-blue-500">Files</span> file.
                    </div>
                  )}
                  <div className="flex flex-col gap-3">
                    {files.map((item, idx) => (
                      <div
                        key={item.file.name + item.size + idx}
                        className={`flex items-start p-4 rounded-2xl border ${getCardBorder(item.uploadStatus)} bg-white/60 shadow-lg relative`}
                      >
                        <FileText className="w-8 h-8 text-teal-400 mr-4 mt-1" />
                        <div className="flex-1">
                          <div className="font-bold text-gray-800">{item.file.name}</div>
                          <div className="text-xs text-gray-500 mb-2">
                            {(item.size / 1024).toFixed(2)} KB
                          </div>
                          {item.uploadStatus === "type-error" && (
                            <div className="flex items-center text-xs text-red-500 mt-1">
                              <AlertTriangle className="w-4 h-4 mr-1" />
                              {item.uploadMessage}
                            </div>
                          )}
                          {item.uploadStatus === "upload-error" && (
                            <div className="flex items-center text-xs text-red-500 mt-1">
                              <AlertTriangle className="w-4 h-4 mr-1" />
                              {item.uploadMessage}
                            </div>
                          )}
                          {item.uploadStatus === "uploading" && (
                            <div className="flex items-center text-xs text-blue-500 mt-1">
                              <Loader2 className="w-4 h-4 mr-1 animate-spin" />
                              {item.uploadMessage}
                            </div>
                          )}
                          {item.uploadStatus === "uploaded" && (
                            <div className="flex items-center text-xs text-teal-600 mt-1">
                              <CheckCircle className="w-4 h-4 mr-1" />
                              {item.uploadMessage}
                            </div>
                          )}
                        </div>
                        <button
                          className="ml-3 text-gray-400 hover:text-red-500 transition"
                          onClick={() => removeFile(item.file)}
                          title="Remove"
                        >
                          <X className="w-5 h-5" />
                        </button>
                      </div>
                    ))}
                  </div>
                </div>

                {/* Validation Card */}
                <div className={`${cardStyle} border-blue-100 px-6 py-5`}>
                  <div className="flex items-center mb-2">
                    <Search className="mr-2 text-teal-400" />
                    <span className="font-bold text-base text-gray-700">Validation</span>
                    <span className="ml-2 text-xs font-normal text-gray-500">
                      ({files.filter(f => f.uploadStatus === "uploaded").length})
                    </span>
                  </div>
                  {files.filter(f => f.uploadStatus === "uploaded").length === 0 && (
                    <div className="text-gray-400 py-6 text-center text-sm italic rounded-xl bg-white/40 shadow">
                      No files ready for validation yet.
                    </div>
                  )}
                  <div className="flex flex-col gap-3">
                    {files
                      .filter(item => item.uploadStatus === "uploaded")
                      .map((item, idx) => (
                        <div
                          key={item.file.name + item.size + idx}
                          className={`flex items-start p-4 rounded-2xl border ${getCardBorder(item.validationStatus)} bg-white/60 shadow-lg relative`}
                        >
                          <FileText className="w-8 h-8 text-teal-400 mr-4 mt-1" />
                          <div className="flex-1">
                            <div className="font-bold text-gray-800">{item.file.name}</div>
                            <div className="text-xs text-gray-500 mb-2">
                              {(item.size / 1024).toFixed(2)} KB
                            </div>
                            <ValidationProgress step={item.validationStep} />
                            <ul className="space-y-1 mt-2">
                              <li className="flex items-center gap-2 text-teal-600 text-sm font-medium">
                                <CheckCircle className="w-4 h-4" /> File uploaded
                              </li>
                              {VALIDATION_STEPS.slice(0, item.validationStep - 1).map((step) => (
                                <li
                                  key={step.key}
                                  className="flex items-center gap-2 text-teal-600 text-sm font-medium"
                                >
                                  <CheckCircle className="w-4 h-4" /> {step.label}
                                </li>
                              ))}
                              {item.validationStep > 1 &&
                                item.validationStep <= VALIDATION_STEPS.length + 1 && (
                                  <li className="flex items-center gap-2 text-blue-600 text-sm font-medium animate-pulse">
                                    <Loader2 className="w-4 h-4 animate-spin" />
                                    {VALIDATION_STEPS[item.validationStep - 2]?.label}
                                  </li>
                                )}
                              {item.validationStatus === "success" && (
                                <li className="flex items-center gap-2 text-teal-600 text-sm font-medium">
                                  <CheckCircle className="w-4 h-4" /> Validation complete
                                </li>
                              )}
                              {item.ingestionStatus === "success" && (
                                <li className="flex items-center gap-2 text-teal-600 text-sm font-medium">
                                  <CheckCircle className="w-4 h-4" /> Ingested into VectorDB
                                </li>
                              )}
                              {item.ingestionStatus === "skipped" && (
                                <li className="flex items-center gap-2 text-teal-600 text-sm font-medium">
                                  <CheckCircle className="w-4 h-4" /> Already in Vector DB (skipped)
                                </li>
                              )}
                              {item.validationStatus === "error" && (
                                <li className="flex items-center gap-2 text-red-600 text-sm font-medium">
                                  <AlertTriangle className="w-4 h-4" /> Validation failed
                                </li>
                              )}
                            </ul>
                            {item.validationStatus === "idle" && (
                              <button
                                className="flex items-center gap-1 px-3 py-1 mt-2 text-xs border rounded-lg border-teal-500 text-teal-700 hover:bg-teal-50 transition"
                                onClick={() => validateUploadedFile(item.file)}
                              >
                                <ArrowRight className="w-4 h-4" /> Validate
                              </button>
                            )}
                            {item.validationStatus === "success" && (
                              <div className="text-xs text-teal-600 mt-2">{item.validationMessage}</div>
                            )}
                          </div>
                          <button
                            className="ml-3 text-gray-400 hover:text-red-500 transition absolute top-4 right-4"
                            onClick={() => removeFile(item.file)}
                            title="Remove"
                          >
                            <X className="w-5 h-5" />
                          </button>
                        </div>
                      ))}
                  </div>
                </div>

                {/* SharePoint Integration Card */}
                <div className={`rounded-2xl border-2 bg-white/80 backdrop-blur-md shadow-xl px-6 py-6 flex flex-col items-center transition-all duration-300 ${getSharePointBoxColor()}`}>
                  <div className="flex items-center mb-3 gap-3">
                    <Share2 className="w-8 h-8 text-blue-700 bg-blue-100 p-2 rounded-full shadow" />
                    <span className="text-lg font-extrabold text-gray-700">
                      SharePoint Integration
                    </span>
                  </div>
                  <div className="flex items-center gap-2 mb-2 text-gray-600 text-xs">
                    <FolderOpen className="w-4 h-4 text-teal-500" />
                    <span className="font-semibold">Sync Folder:</span>
                    <span className="truncate" title={SHAREPOINT_FOLDER_PATH}>
                      {SHAREPOINT_FOLDER_PATH}
                    </span>
                    <ExternalLink className="w-4 h-4 text-blue-400" />
                  </div>
                  <div className="mb-2 text-center text-gray-500 text-xs">
                    Validated documents will be moved to your SharePoint folder for organization-wide access.
                  </div>
                  <button
                    onClick={handleSharePointSync}
                    disabled={sharePointStatus === "syncing"}
                    className="flex items-center gap-2 px-6 py-2 rounded-xl bg-gradient-to-r from-blue-600 to-teal-500 text-white font-bold shadow-lg hover:bg-blue-700 transition disabled:bg-gray-300 disabled:text-gray-400 disabled:shadow-none"
                  >
                    {sharePointStatus === "syncing" ? (
                      <Loader2 className="w-5 h-5 animate-spin" />
                    ) : (
                      <Share2 className="w-5 h-5" />
                    )}
                    {sharePointStatus === "syncing" ? "Syncing..." : "Sync to SharePoint"}
                  </button>
                                    {sharePointStatus === "success" && (
                    <div className="flex items-center text-teal-600 mt-2 text-xs">
                      <CheckCircle className="w-5 h-5 mr-1" /> {sharePointMessage}
                    </div>
                  )}
                  {sharePointStatus === "error" && (
                    <div className="flex items-center text-red-600 mt-2 text-xs">
                      <AlertTriangle className="w-5 h-5 mr-1" /> {sharePointMessage}
                    </div>
                  )}
                  {sharePointStatus === "syncing" && (
                    <div className="flex items-center text-blue-600 mt-2 text-xs">
                      <Loader2 className="w-4 h-4 mr-1 animate-spin" /> {sharePointMessage}
                    </div>
                  )}
                  {sharePointStatus === "idle" && sharePointMessage && (
                    <div className="flex items-center text-gray-500 mt-2 text-xs">
                      {sharePointMessage}
                    </div>
                  )}
                </div>
              </div>
            </section>
          </div>
        </Modal>
      </div>
    </div>
  );
}
