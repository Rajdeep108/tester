const validateAndIngestFile = async (file: File) => {
  // --- Step 1: Validate ---
  setFiles(prev =>
    prev.map(f =>
      f.file === file
        ? {
            ...f,
            validationStatus: "validating",
            validationMessage: "Checking keywords & structure...",
            validationStep: 1,
          }
        : f
    )
  );

  try {
    const validateRes = await axios.post(
      "http://localhost:8000/api/validate",
      { filename: file.name },
      { headers: { "Content-Type": "application/json" } }
    );

    if (!validateRes.data.is_valid) {
      setFiles(prev =>
        prev.map(f =>
          f.file === file
            ? {
                ...f,
                validationStatus: "error",
                validationMessage: validateRes.data.validation_message,
                validationStep: 2,
              }
            : f
        )
      );
      return;
    }

    // --- Step 2: Ingest ---
    setFiles(prev =>
      prev.map(f =>
        f.file === file
          ? {
              ...f,
              validationStatus: "success",
              validationMessage: validateRes.data.validation_message,
              validationStep: 2, // completed validation
              ingestionStatus: "idle",
            }
          : f
      )
    );

    setFiles(prev =>
      prev.map(f =>
        f.file === file
          ? { ...f, ingestionStatus: "idle" } // reset ingestion spinner
          : f
      )
    );

    setFiles(prev =>
      prev.map(f =>
        f.file === file
          ? { ...f, ingestionStatus: "validating", validationStep: 3, validationMessage: "Ingesting..." }
          : f
      )
    );

    const ingestRes = await axios.post(
      "http://localhost:8000/api/ingest",
      { filename: file.name, metadata: validateRes.data.metadata },
      { headers: { "Content-Type": "application/json" } }
    );

    setFiles(prev =>
      prev.map(f =>
        f.file === file
          ? {
              ...f,
              ingestionStatus: ingestRes.data.ingested ? "success" : "skipped",
              validationStep: 4,
              validationMessage: `${validateRes.data.validation_message} | ${ingestRes.data.message}`,
            }
          : f
      )
    );
  } catch (err: any) {
    setFiles(prev =>
      prev.map(f =>
        f.file === file
          ? {
              ...f,
              validationStatus: "error",
              ingestionStatus: "skipped",
              validationMessage: err.response?.data?.detail || err.message || "Validation/Ingestion failed",
              validationStep: 2,
            }
          : f
      )
    );
  }
};
