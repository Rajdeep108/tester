# --- User symbol mapping ---
USER_SYMBOLS = {
    "Harsh": "h",
    "Person2": "p",
    "Person3": "y"   # replace this value per userâ€™s local code
}
CURRENT_USER = "Person3" 


def rename_with_metadata(validated_path: str, content: str, original_ext: str) -> str:
    """
    Rename a validated file to: <StandardName>_<Version>_<ReleaseDate>#<UserSymbol>.<ext>
    Falls back to 'UNKNOWN' if any part is missing.
    """
    try:
        # --- Extract metadata ---
        standard_match = STANDARD_REGEX.search(content or "")
        standard_name = (
            standard_match.group(0).upper().replace(" ", "-") if standard_match else "UNKNOWN"
        )

        version_date_match = DATE_REGEX.search(content or "")
        if version_date_match:
            version = version_date_match.group(0).split()[0].upper()
            release_date = version_date_match.group(1)
        else:
            version_match = VERSION_REGEX.search(content or "")
            version = version_match.group(0).upper() if version_match else "UNKNOWN"
            release_date = "UNKNOWN"

        # --- Add user code ---
        user_symbol = USER_SYMBOLS.get(CURRENT_USER, "x")

        # --- Build new filename ---
        new_filename = f"{standard_name}_{version}_{release_date}#{user_symbol}{original_ext}"

        # --- Rename file safely ---
        new_path = os.path.join(VALIDATED_DIR, new_filename)
        os.rename(validated_path, new_path)

        return new_filename
    except Exception as e:
        # In case of ANY unexpected issue, rename with UNKNOWN
        user_symbol = USER_SYMBOLS.get(CURRENT_USER, "x")
        fallback_filename = f"UNKNOWN_UNKNOWN_UNKNOWN#{user_symbol}{original_ext}"
        new_path = os.path.join(VALIDATED_DIR, fallback_filename)
        os.rename(validated_path, new_path)
        return fallback_filename



@router.post("/api/validate")
def validate_file(req: ValidateRequest):
    file_location = os.path.join(UPLOAD_DIR, req.filename)
    if not os.path.isfile(file_location):
        return {"is_valid": False, "validation_message": "Not Found"}

    # Run validation
    is_valid, validation_message = validate_document(file_location)

    if is_valid:
        ext = os.path.splitext(req.filename)[1].lower()

        # Extract content for renaming
        if ext == ".docx":
            content = read_docx(file_location)
        elif ext == ".doc":
            content = read_doc(file_location)
        else:
            content = ""

        # --- Use the new rename_with_metadata function ---
        new_filename = rename_with_metadata(file_location, content, ext)

        return {
            "is_valid": True,
            "validation_message": validation_message,
            "validated_location": os.path.join(VALIDATED_DIR, new_filename),
            "renamed_filename": new_filename
        }

    else:
        return {"is_valid": False, "validation_message": validation_message}
