import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Switch } from '@/components/ui/switch';
import {
  Zap,
  Settings,
  CheckCircle,
  Clock,
} from 'lucide-react';

// Modal with backdrop blur and smooth fade
function Modal({ open, onClose, children }) {
  if (!open) return null;
  return (
    <div
      className="fixed inset-0 flex items-center justify-center z-50 bg-black/30 backdrop-blur-sm transition-all animate-fade-in"
      onClick={onClose}
    >
      <div
        className="bg-white rounded-xl shadow-2xl p-8 min-w-[340px] max-w-[96vw] max-h-[90vh] animate-modal-pop overflow-y-auto"
        onClick={e => e.stopPropagation()}
      >
        {children}
      </div>
    </div>
  );
}

// Helper for avatar initials
function getStandardInitials(name) {
  return name.split(' ').map(w => w[0]).join('').slice(0, 3).toUpperCase();
}

// Modern, animated status badge
function StatusBadge({ active }) {
  return (
    <Badge
      className={`ml-1 px-2 py-0.5 rounded-full text-xs font-bold border transition-colors duration-300 shadow-sm


      ${active
        ? 'bg-gradient-to-r from-green-400 to-green-600 text-white border-green-500 animate-pulse-slow'
        : 'bg-gradient-to-r from-gray-200 to-gray-400 text-gray-600 border-gray-300'
      }`}
    >
      {active ? 'Active' : 'Inactive'}
    </Badge>
  );
}

// Animated background SVG
function BackgroundSVG() {
  return (
    <svg className="absolute inset-0 pointer-events-none z-0 w-full h-full" width="100%" height="100%">
      <defs>
        <radialGradient id="bg-gradient-1" cx="50%" cy="50%" r="80%">
          <stop offset="0%" stopColor="#c7d2fe" stopOpacity="0.3" />
          <stop offset="100%" stopColor="#6366f1" stopOpacity="0" />
        </radialGradient>
        <radialGradient id="bg-gradient-2" cx="50%" cy="50%" r="80%">
          <stop offset="0%" stopColor="#bae6fd" stopOpacity="0.3" />
          <stop offset="100%" stopColor="#22d3ee" stopOpacity="0" />
        </radialGradient>
      </defs>
      <circle cx="85%" cy="12%" r="110" fill="url(#bg-gradient-1)" />
      <circle cx="18%" cy="88%" r="100" fill="url(#bg-gradient-2)" />
    </svg>
  );
}

const workflowsData = [
  {
    id: 1,
    name: '3GPP Standards Monitor',
    description: 'Automatically detect new 3GPP releases and trigger document mapping workflow',
    actionStatus: 'New version detected',
    notifyStakeholder: true,
    lastRun: '2024-06-28 14:30',
    frequency: 15,
    isActive: true,
    monitoredStandards: ['3GPP TS 23.002'],
    type: '3gpp',
    url: '',
  },
];

export default function WorkflowAutomation() {
  const [workflows, setWorkflows] = useState(workflowsData);
  const [editingId, setEditingId] = useState(null);
  const [editFrequency, setEditFrequency] = useState(0);

  // Backend-driven crawler status for 3gpp
  const [crawlerStatus, setCrawlerStatus] = useState({ active: false, lastRun: '', lastStatus: '' });
  const [latestLog, setLatestLog] = useState('');
  const [backendFrequency, setBackendFrequency] = useState(15);
  const [editStandardName, setEditStandardName] = useState('');
  const [editUrl, setEditUrl] = useState('');



  // WebSocket for live backend status/log
  useEffect(() => {
    const ws = new WebSocket('ws://localhost:8000/ws/monitor');
    ws.onmessage = (event) => {
      try {
        const payload = JSON.parse(event.data);
        if (payload.type === 'log') {
          setLatestLog(payload.data || '');
        }
        if (payload.type === 'status') {
          setBackendFrequency(payload.data.frequency);
          setCrawlerStatus(s => ({
            ...s,
            lastRun: payload.data.last_checked,
            lastStatus: payload.data.status,
          }));
        }
      } catch (e) {
        // Optionally handle JSON parse error
      }
    };
    ws.onclose = () => {
      // Optionally handle close event
    };
    return () => ws.close();
  }, []);

  // On mount, fetch initial backend state for 3gpp agent
  useEffect(() => {
    // Fetch crawler active/inactive status
    fetch('http://localhost:8000/monitor/agent')
      .then(res => res.json())
      .then(data => {
        setCrawlerStatus(s => ({ ...s, active: data.active }));
        setWorkflows(wfs =>
          wfs.map(w =>
            w.type === '3gpp'
              ? { ...w, isActive: data.active }
              : w
          )
        );
      });

    // Fetch latest run/status info
    fetch('http://localhost:8000/monitor/status')
  .then(res => res.json())
  .then(arr => {
    if (arr.length) {
      setCrawlerStatus(s => ({
        ...s,
        lastRun: arr[0].last_checked,
        lastStatus: arr[0].status
      }));
      setBackendFrequency(arr[0].frequency);
      setWorkflows(wfs =>
        wfs.map(w =>
          w.type === '3gpp'
            ? {
                ...w,
                lastRun: arr[0].last_checked,
                frequency: arr[0].frequency,
                url: arr[0].monitoring_url // <-- update url!
              }
            : w
        )
      );
    }
  });
  }, []);

  // Toggle 3gpp agent via backend
  const toggleCrawler = async () => {
    await fetch('http://localhost:8000/monitor/agent/toggle', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ active: !crawlerStatus.active }),
    });
    setCrawlerStatus(s => ({ ...s, active: !s.active }));
    setWorkflows(wfs =>
      wfs.map(w =>
        w.type === '3gpp'
          ? { ...w, isActive: !w.isActive }
          : w
      )
    );
  };

  // Open modal to edit frequency
  const openEdit = (workflow) => {
  setEditingId(workflow.id);
  setEditFrequency(workflow.type === '3gpp' ? backendFrequency : workflow.frequency);
  setEditStandardName(workflow.monitoredStandards[0] || '');
  setEditUrl(workflow.url || ''); // Add this line
};


  // Save frequency (calls backend for 3gpp)
  const saveFrequency = async () => {
  if (editingId === 1) { // 3GPP agent
    await fetch(`http://localhost:8000/agent/${editingId}/frequency`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ frequency: editFrequency }),
    });
    await fetch(`http://localhost:8000/agent/${editingId}/standard_name`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ standard_name: editStandardName }),
    });
    await fetch(`http://localhost:8000/agent/${editingId}/url`, {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ url: editUrl }),
    });
    setBackendFrequency(editFrequency);
    setWorkflows(ws =>
      ws.map(w =>
        w.id === editingId
          ? {
              ...w,
              frequency: editFrequency,
              monitoredStandards: [editStandardName],
              url: editUrl
            }
          : w
      )
    );
  } else {
    setWorkflows(ws =>
      ws.map(w =>
        w.id === editingId
          ? {
              ...w,
              frequency: editFrequency,
              monitoredStandards: [editStandardName],
              url: editUrl
            }
          : w
      )
    );
  }
  setEditingId(null);
};

  const cardStyle =
    "hover:shadow-2xl hover:-translate-y-1 transition-all duration-400 bg-white/80 backdrop-blur rounded-2xl border border-gray-100 w-full max-w-[700px] mx-auto min-h-[420px] max-h-[650px] flex flex-col";
  const cardContentStyle = "space-y-7 flex-1";

  return (
    <div
      className="relative min-h-screen min-w-full flex flex-col items-center justify-center overflow-hidden"
      style={{
        background: "linear-gradient(135deg, #f4fbff 0%, #e0f2fe 100%)"
      }}
    >
      {/* Animated background */}
      <BackgroundSVG />

            <div className="relative z-10 w-full max-w-5xl mx-auto px-4 pb-14 pt-10">
        {/* Page Header */}
        <div className="flex flex-col md:flex-row md:items-center md:justify-between mb-10 w-full">
          <div>
            <h1 className="text-4xl font-extrabold bg-gradient-to-r from-blue-600 via-sky-400 to-teal-400 text-transparent bg-clip-text mb-2 flex items-center gap-3 drop-shadow-lg animate-fade-in">
              <Zap className="text-blue-500" size={38} />
              Workflow Automation
            </h1>
            <p className="text-lg text-gray-600">
              <span className="inline-block bg-gradient-to-r from-blue-100 via-teal-100 to-blue-50 rounded-full px-3 py-1 mr-3 font-semibold text-blue-700 animate-fade-in">
                <CheckCircle className="inline-block text-blue-400 mr-1" size={16} />
                Automated Standards Management
              </span>
              Automate document workflows when new standards are released
            </p>
          </div>
        </div>

        {/* Workflow Cards */}
        <div className="grid grid-cols-1 lg:grid-cols-2 gap-8 w-full">
          {/* 3GPP Standards Monitor */}
          {workflows.filter(w => w.type === '3gpp').map((workflow) => (
            <Card key={workflow.id} className={cardStyle}>
              <CardHeader className="pb-4">
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <div className="flex items-center gap-3 mb-2">
                      <CardTitle className="text-2xl font-bold flex items-center gap-2">
                        <Zap className="text-blue-400" size={28} />
                        {workflow.name}
                      </CardTitle>
                      <StatusBadge active={crawlerStatus.active} />
                    </div>
                    <p className="text-md text-gray-500 font-medium">{workflow.description}</p>
                  </div>
                </div>
              </CardHeader>
              <CardContent className={cardContentStyle}>
                {/* Monitored Standards */}
                <div className="space-y-2">
                  <div className="flex items-center gap-2 text-xs font-semibold text-gray-700">
                    <Zap className="h-4 w-4 text-cyan-500" />
                    Monitored Standard:
                  </div>
                  <div className="flex flex-wrap gap-2 mt-1">
                    {workflow.monitoredStandards.map((standard, sidx) => (
                      <Badge
                        key={sidx}
                        variant="outline"
                        className="text-xs flex items-center gap-1 px-2 py-1 bg-gradient-to-r from-blue-100 to-teal-100 border-blue-200 text-blue-700"
                      >
                        <span className="inline-flex items-center justify-center w-5 h-5 rounded-full bg-blue-200 text-blue-700 font-bold text-xs mr-1 shadow">
                          {getStandardInitials(standard)}
                        </span>
                        {standard}
                      </Badge>
                    ))}
                  </div>
                    {/* Add monitored URL below the standards */}
                    <div className="mt-2">
                      <div className="flex items-center gap-2 text-xs font-semibold text-gray-700">
                        <Zap className="h-3 w-3 text-cyan-500" />
                        Monitored URL:
                      </div>
                      <Badge
                        variant="outline"
                        className="text-xs flex items-center gap-1 px-2 py-1 bg-gradient-to-r from-blue-100 to-teal-100 border-blue-200 text-blue-700 break-all"
                      >
                        <a target="_blank" rel="noopener noreferrer">
                          {workflow.url}
                        </a>
                      </Badge>
                    </div>
                    </div>


                {/* Actions */}
                <div className="space-y-3">
                  <div className="text-sm font-semibold text-gray-800">Actions:</div>
                  <div className="space-y-2">
                    <div className="flex items-center gap-3 text-sm">
                      <CheckCircle className={`h-4 w-4 ${crawlerStatus.active ? 'text-green-500' : 'text-gray-400'}`} />
                      <span className={crawlerStatus.active ? 'text-gray-800' : 'text-gray-400'}>
                        Trigger: New Version Detection
                      </span>
                    </div>
                    <div className="flex items-center gap-3 text-sm">
                      <CheckCircle className={`h-4 w-4 ${crawlerStatus.active ? 'text-green-500' : 'text-gray-400'}`} />
                      <span className={crawlerStatus.active ? 'text-gray-800' : 'text-gray-400'}>
                        Stakeholder notification
                      </span>
                    </div>
                  </div>
                </div>

                {/* Latest Log */}
                {latestLog && (
                  <div className="py-2 px-3 text-sm font-medium text-blue-700 bg-blue-50 rounded border border-blue-100 shadow animate-fade-in">
                    {latestLog}
                  </div>
                )}

                {/* Run Details */}
                <div className="grid grid-cols-2 gap-4 pt-4 border-t">
                  <div>
                    <div className="text-xs text-gray-400 mb-1">Last Run:</div>
                    <div className="text-sm font-semibold text-gray-700 flex items-center gap-1">
                      <Clock className="h-3 w-3" />
                      {crawlerStatus.lastRun || 'N/A'}
                    </div>
                  </div>
                  <div>
                    <div className="text-xs text-gray-400 mb-1">Frequency (seconds):</div>
                    <div className="text-sm font-semibold text-gray-700">
                      {backendFrequency}
                    </div>
                  </div>
                </div>

                {/* Footer Actions */}
                <div className="flex items-center justify-between pt-4 border-t">
                  <div className="flex items-center gap-2">
                    <Switch
                      checked={crawlerStatus.active}
                      onCheckedChange={toggleCrawler}
                    />
                    <span className="text-sm text-gray-500">
                      {crawlerStatus.active ? 'Active' : 'Inactive'}
                    </span>
                  </div>
                  <div>
                    <Button
                      variant="ghost"
                      size="icon"
                      className="h-8 w-8"
                      onClick={() => openEdit(workflow)}
                    >
                      <Settings className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              </CardContent>
            </Card>
          ))}

          {/* Agent Health & Suggestions Card */}
          <Card className={cardStyle + " flex items-center justify-center"}>
          <CardContent className="flex flex-col items-center justify-center h-full py-12">
            <div className="flex items-center gap-2 mb-3">
              <Zap className={`h-8 w-8 ${crawlerStatus.active ? "text-teal-500 animate-pulse-slow" : "text-gray-300"}`} />
              <span className={`font-bold text-lg ${crawlerStatus.active ? "text-teal-700" : "text-gray-400"}`}>Agent Health</span>
            </div>
            <div className={`font-medium mb-1 flex items-center gap-1 ${crawlerStatus.active ? "text-green-600" : "text-gray-400"}`}>
              <span className={`w-2 h-2 rounded-full ${crawlerStatus.active ? "bg-green-400 animate-pulse" : "bg-gray-300"}`}></span>
              {crawlerStatus.active ? "Online & Healthy" : "Offline"}
            </div>
            <p className="text-gray-600 text-center max-w-xs mb-3">
              {crawlerStatus.active
                ? "Your automation agent is running. All systems are operational!"
                : "Your automation agent is currently offline. Enable it to resume monitoring and automations."
              }
            </p>
            <ul className="text-xs text-gray-500 mb-3 space-y-1">
              <li>• Tip: You’ll be notified when new standards are published.</li>
              <li>• More workflow types coming soon.</li>
            </ul>
            <Button variant="outline" disabled>
              Explore More Automations
            </Button>
          </CardContent>
        </Card>
        </div>

        {/* Modal for Editing Frequency */}
        <Modal open={editingId !== null} onClose={() => setEditingId(null)}>
          <div className="mb-4">
            <h2 className="text-xl font-bold mb-1 flex items-center gap-2">
              <Settings className="h-5 w-5 text-blue-500" />
              Edit Run Frequency
            </h2>
            <p className="text-gray-500 text-sm mb-2">
              Set how often the agent checks for new standards (in seconds).
            </p>
            <input
              type="number"
              className="border px-3 py-2 rounded w-full"
              value={editFrequency}
              min={5}
              max={3600}
              onChange={e => setEditFrequency(Number(e.target.value))}
            />
            <label className="block text-sm font-medium text-gray-700 mb-1">
              Standard Name
            </label>
            <input
              type="text"
              className="border px-3 py-2 rounded w-full mb-4"
              value={editStandardName}
              onChange={e => setEditStandardName(e.target.value)}
            />
          </div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                Monitored URL
              </label>
              <input
                type="text"
                className="border px-3 py-2 rounded w-full mb-4"
                value={editUrl}
                onChange={e => setEditUrl(e.target.value)}
              />
          <div className="flex justify-end gap-2">
            <Button variant="ghost" onClick={() => setEditingId(null)}>
              Cancel
            </Button>
            <Button onClick={saveFrequency}>Save</Button>
          </div>
        </Modal>
      </div>
    </div>
  );
}
