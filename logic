import React, { useRef, useState } from "react";
import {
  FileText,
  X,
  Upload,
  AlertTriangle,
  CheckCircle,
  Loader2,
  Search,
  ArrowRight,
  Share2,
  FolderOpen,
  ExternalLink
} from "lucide-react";
import axios from "axios";

type UploadStatus = "idle" | "uploading" | "uploaded" | "type-error" | "upload-error";
type ValidationStatus = "idle" | "validating" | "success" | "error";
type SharePointStatus = "idle" | "syncing" | "success" | "error";

interface FileRecord {
  file: File;
  uploadStatus: UploadStatus;
  uploadMessage: string;
  validationStatus: ValidationStatus;
  validationMessage: string;
  size: number;
  validationStep: number; // 0: not started, 1: uploaded, 2+: validation steps, length+2: done
}

// --- DYNAMIC VALIDATION STEPS ---
const VALIDATION_STEPS = [
  { key: 1, label: "Checking keywords" },
  { key: 2, label: "Checking document structure" },
  // You can add more steps here!
];

const ACCEPTED_TYPES = ["application/msword", //.doc
                        "application/vnd.openxmlformats-officedocument.wordprocessingml.document" // .docx
];
const SHAREPOINT_FOLDER_PATH = "C:\\Users\\342559\\NTT DATA North America\\GenAI CoE India - Standards";

// --- OPTIONAL: Progress Bar ---
const ValidationProgress = ({ step }: { step: number }) => {
  const percent = step <= 1
    ? 0
    : Math.min(((step - 1) / (VALIDATION_STEPS.length + 1)) * 100, 100);
  return (
    <div className="w-full bg-gray-200 rounded-xl h-2 mt-2 mb-2 overflow-hidden">
      <div
        className="h-2 bg-gradient-to-r from-blue-400 to-violet-400 transition-all duration-700"
        style={{ width: `${percent}%` }}
      ></div>
    </div>
  );
};

export default function DocumentUpload() {
  const [files, setFiles] = useState<FileRecord[]>([]);
  const [sharePointStatus, setSharePointStatus] = useState<SharePointStatus>("idle");
  const [sharePointMessage, setSharePointMessage] = useState<string>("");
  const fileInputRef = useRef<HTMLInputElement>(null);

  // --- File Validation ---
  const validateFile = (file: File): string | null => {
    if (
      !(ACCEPTED_TYPES.includes(file.type) 
      || file.name.toLowerCase().endsWith(".doc")) 
      || file.name.toLowerCase().endsWith(".docx"))
    ) {
      return "Only .doc or .docx files are allowed.";
    }
    if (file.size > 50 * 1024 * 1024) return "File must be less than 50MB.";
    return null;
  };

  const handleFiles = (filesList: FileList | null) => {
    if (!filesList) return;
    const arr = Array.from(filesList);
    arr.forEach((file) => {
      const error = validateFile(file);
      if (error) {
        setFiles((prev) => [
          ...prev,
          {
            file,
            uploadStatus: "type-error",
            uploadMessage: error,
            validationStatus: "idle",
            validationMessage: "",
            size: file.size,
            validationStep: 0,
          },
        ]);
        return;
      }
      setFiles((prev) => [
        ...prev,
        {
          file,
          uploadStatus: "uploading",
          uploadMessage: "Uploading...",
          validationStatus: "idle",
          validationMessage: "",
          size: file.size,
          validationStep: 0,
        },
      ]);
      uploadFile(file);
    });
  };

  const handleDrop = (e: React.DragEvent<HTMLDivElement>) => {
    e.preventDefault();
    handleFiles(e.dataTransfer.files);
  };

  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    handleFiles(e.target.files);
    if (fileInputRef.current) fileInputRef.current.value = "";
  };

  // --- Upload File ---
  const uploadFile = async (file: File) => {
    const data = new FormData();
    data.append("file", file);
    try {
      await new Promise((res) => setTimeout(res, 700));
      await axios.post("http://localhost:8000/api/upload", data, {
        headers: { "Content-Type": "multipart/form-data" },
      });
      setFiles((prev) =>
        prev.map((f) =>
          f.file === file
            ? {
                ...f,
                uploadStatus: "uploaded",
                uploadMessage: "Uploaded successfully!",
                validationStep: 1,
              }
            : f
        )
      );
    } catch (err: any) {
      setFiles((prev) =>
        prev.map((f) =>
          f.file === file
            ? {
                ...f,
                uploadStatus: "upload-error",
                uploadMessage:
                  err.response?.data?.detail ||
                  err.message ||
                  "Upload failed",
              }
            : f
        )
      );
    }
  };

  // --- DYNAMIC VALIDATION STEPS LOGIC ---
  const validateUploadedFile = async (file: File) => {
    for (let i = 0; i < VALIDATION_STEPS.length; i++) {
      setFiles((prev) =>
        prev.map((f) =>
          f.file === file
            ? {
                ...f,
                validationStatus: "validating",
                validationMessage: VALIDATION_STEPS[i].label + "...",
                validationStep: i + 2, // 1: uploaded, 2: first validation step, etc.
              }
            : f
        )
      );
      await new Promise((res) => setTimeout(res, 1000));
    }

    // After all steps, call backend
    try {
      const res = await axios.post(
        "http://localhost:8000/api/validate",
        { filename: file.name },
        { headers: { "Content-Type": "application/json" } }
      );
      setFiles((prev) =>
        prev.map((f) =>
          f.file === file
            ? {
                ...f,
                validationStatus: res.data.is_valid ? "success" : "error",
                validationMessage: res.data.validation_message,
                validationStep: VALIDATION_STEPS.length + 2,
              }
            : f
        )
      );
    } catch (err: any) {
      setFiles((prev) =>
        prev.map((f) =>
          f.file === file
            ? {
                ...f,
                validationStatus: "error",
                validationMessage:
                  err.response?.data?.detail ||
                  err.message ||
                  "Validation failed",
                validationStep: VALIDATION_STEPS.length + 2,
              }
            : f
        )
      );
    }
  };

  const removeFile = (file: File) => {
    setFiles((prev) => prev.filter((f) => f.file !== file));
  };

  // --- SharePoint Sync Handler ---
  const handleSharePointSync = async () => {
    setSharePointStatus("syncing");
    setSharePointMessage("Syncing validated documents to SharePoint...");
    try {
      const validatedFiles = files.filter(f => f.validationStatus === "success").map(f => f.file.name);
      if (validatedFiles.length === 0) {
        setSharePointStatus("error");
        setSharePointMessage("No validated files to sync.");
        return;
      }
      // Implement this endpoint in your backend!
      const res = await axios.post(
        "http://localhost:8000/api/sharepoint-sync",
        { filenames: validatedFiles },
        { headers: { "Content-Type": "application/json" } }
      );
      setSharePointStatus("success");
      setSharePointMessage(res.data?.message || "Synced successfully to SharePoint!");
    } catch (err: any) {
      setSharePointStatus("error");
      setSharePointMessage(
        err.response?.data?.detail ||
        err.message ||
        "SharePoint sync failed"
      );
    }
  };

  // --- Card border color ---
  const getCardBorder = (status: UploadStatus | ValidationStatus) => {
    switch (status) {
      case "uploaded":
      case "success":
        return "border-green-300";
      case "upload-error":
      case "type-error":
      case "error":
        return "border-red-300";
      case "uploading":
      case "validating":
        return "border-blue-300";
      default:
        return "border-gray-200";
    }
  };

  const getSharePointBoxColor = () => {
    switch (sharePointStatus) {
      case "success":
        return "border-green-400 shadow-green-100";
      case "error":
        return "border-red-300 shadow-red-100";
      case "syncing":
        return "border-blue-300 shadow-blue-100";
      default:
        return "border-violet-300 shadow-violet-100";
    }
  };

  return (
        <div className="min-h-screen w-full bg-gradient-to-br from-blue-100 via-violet-100 to-white font-sans flex flex-col items-center py-10">
      <div className="w-full max-w-2xl">
        {/* Upload area */}
        <div
          className="rounded-3xl border border-blue-200 shadow-2xl bg-white/70 backdrop-blur-md flex flex-col items-center py-12 px-8 transition-all duration-300 hover:shadow-blue-200/60"
          onDragOver={(e) => e.preventDefault()}
          onDrop={handleDrop}
        >
          <div className="mb-3 flex flex-col items-center">
            <Upload className="w-16 h-16 text-blue-500 bg-blue-100 p-4 rounded-full shadow-lg shadow-blue-100/50 mb-4" />
            <div className="text-2xl font-extrabold text-gray-700 mb-2 text-center">
              Upload <span className="text-blue-500">.doc</span> Files
            </div>
            <div className="text-gray-500 mb-4 text-sm">
              <span className="bg-blue-100 px-2 py-1 rounded text-blue-700 font-medium">.doc</span> or{" "}
              <span> className="bg-blue-100 px-2 py-1 rounded text-blue-700 font-medium">.docx</span> up to <span className="font-semibold">50MB</span>
            </div>
            <button
              className="inline-flex items-center gap-2 border border-blue-600 bg-blue-500/10 text-blue-700 font-bold px-7 py-2 rounded-xl mt-2 hover:bg-blue-500 hover:text-white transition-all duration-200 shadow"
              onClick={e => {
                e.stopPropagation();
                fileInputRef.current?.click();
              }}
            >
              <Upload className="w-5 h-5" />
              Select Files
            </button>
            <input
              type="file"
              multiple
              accept=".doc, .docx"
              ref={fileInputRef}
              className="hidden"
              onChange={handleFileChange}
            />
          </div>
        </div>

        {/* Uploaded Files Section */}
        <div className="mt-10">
          <div className="flex items-center mb-3">
            <FileText className="mr-2 text-blue-400" />
            <span className="font-bold text-lg text-gray-700">Uploaded Files</span>
            <span className="ml-2 text-sm font-normal text-gray-500">({files.length})</span>
          </div>
          {files.length === 0 && (
            <div className="text-gray-400 py-8 text-center text-sm italic rounded-xl bg-white/40 shadow">
              No files uploaded yet. Start by dropping or selecting a <span className="text-blue-500">.doc</span> file.
            </div>
          )}
          <div className="flex flex-col gap-3">
            {files.map((item, idx) => (
              <div
                key={item.file.name + item.size + idx}
                className={`flex items-start p-5 rounded-2xl border ${getCardBorder(item.uploadStatus)} bg-white/60 shadow-lg relative`}
              >
                <FileText className="w-8 h-8 text-green-400 mr-4 mt-1" />
                <div className="flex-1">
                  <div className="font-bold text-gray-800">{item.file.name}</div>
                  <div className="text-xs text-gray-500 mb-2">
                    {(item.size / 1024).toFixed(2)} KB
                  </div>
                  {/* Upload Status */}
                  {item.uploadStatus === "type-error" && (
                    <div className="flex items-center text-xs text-red-500 mt-1">
                      <AlertTriangle className="w-4 h-4 mr-1" />
                      {item.uploadMessage}
                    </div>
                  )}
                  {item.uploadStatus === "upload-error" && (
                    <div className="flex items-center text-xs text-red-500 mt-1">
                      <AlertTriangle className="w-4 h-4 mr-1" />
                      {item.uploadMessage}
                    </div>
                  )}
                  {item.uploadStatus === "uploading" && (
                    <div className="flex items-center text-xs text-blue-500 mt-1">
                      <Loader2 className="w-4 h-4 mr-1 animate-spin" />
                      {item.uploadMessage}
                    </div>
                  )}
                  {item.uploadStatus === "uploaded" && (
                    <div className="flex items-center text-xs text-green-600 mt-1">
                      <CheckCircle className="w-4 h-4 mr-1" />
                      {item.uploadMessage}
                    </div>
                  )}
                </div>
                <button
                  className="ml-3 text-gray-400 hover:text-red-500 transition"
                  onClick={() => removeFile(item.file)}
                  title="Remove"
                >
                  <X className="w-5 h-5" />
                </button>
              </div>
            ))}
          </div>
        </div>

        {/* Validation Section */}
        <div className="mt-10">
          <div className="flex items-center mb-3">
            <Search className="mr-2 text-violet-400" />
            <span className="font-bold text-lg text-gray-700">Validation</span>
            <span className="ml-2 text-sm font-normal text-gray-500">
              ({files.filter(f => f.uploadStatus === "uploaded").length})
            </span>
          </div>
          {files.filter(f => f.uploadStatus === "uploaded").length === 0 && (
            <div className="text-gray-400 py-8 text-center text-sm italic rounded-xl bg-white/40 shadow">
              No files ready for validation yet.
            </div>
          )}
          <div className="flex flex-col gap-3">
            {files
              .filter(item => item.uploadStatus === "uploaded")
              .map((item, idx) => (
                <div
                  key={item.file.name + item.size + idx}
                  className={`flex items-start p-5 rounded-2xl border ${getCardBorder(item.validationStatus)} bg-white/60 shadow-lg relative`}
                >
                  <FileText className="w-8 h-8 text-green-400 mr-4 mt-1" />
                  <div className="flex-1">
                    <div className="font-bold text-gray-800">{item.file.name}</div>
                    <div className="text-xs text-gray-500 mb-2">
                      {(item.size / 1024).toFixed(2)} KB
                    </div>
                    {/* --- DYNAMIC VALIDATION STEPPER --- */}
                    <ValidationProgress step={item.validationStep} />
                    <ul className="space-y-1 mt-2">
                      {/* Uploaded step always shows first */}
                      <li className="flex items-center gap-2 text-green-600 text-sm font-medium">
                        <CheckCircle className="w-4 h-4" /> File uploaded
                      </li>
                      {/* Show all completed steps */}
                      {VALIDATION_STEPS.slice(0, item.validationStep - 1).map((step) => (
                        <li
                          key={step.key}
                          className="flex items-center gap-2 text-green-600 text-sm font-medium"
                        >
                          <CheckCircle className="w-4 h-4" /> {step.label}
                        </li>
                      ))}
                      {/* Show the current running step */}
                      {item.validationStep > 1 &&
                        item.validationStep <= VALIDATION_STEPS.length + 1 && (
                          <li className="flex items-center gap-2 text-blue-600 text-sm font-medium animate-pulse">
                            <Loader2 className="w-4 h-4 animate-spin" />
                            {VALIDATION_STEPS[item.validationStep - 2]?.label}
                          </li>
                        )}
                      {/* Show final status if finished */}
                      {item.validationStatus === "success" && (
                        <li className="flex items-center gap-2 text-green-600 text-sm font-medium">
                          <CheckCircle className="w-4 h-4" /> Validation complete
                        </li>
                      )}
                      {item.validationStatus === "error" && (
                        <li className="flex items-center gap-2 text-red-600 text-sm font-medium">
                          <AlertTriangle className="w-4 h-4" /> Validation failed
                        </li>
                      )}
                    </ul>
                    {/* Show backend message below steps */}
                    {item.validationStatus === "idle" && (
                      <button
                        className="flex items-center gap-1 px-3 py-1 mt-2 text-xs border rounded-lg border-violet-500 text-violet-700 hover:bg-violet-50 transition"
                        onClick={() => validateUploadedFile(item.file)}
                      >
                        <ArrowRight className="w-4 h-4" /> Validate
                      </button>
                    )}
                                        {item.validationStatus === "success" && (
                      <div className="text-xs text-green-600 mt-2">{item.validationMessage}</div>
                    )}
                  </div>
                  <button
                    className="ml-3 text-gray-400 hover:text-red-500 transition absolute top-4 right-4"
                    onClick={() => removeFile(item.file)}
                    title="Remove"
                  >
                    <X className="w-5 h-5" />
                  </button>
                </div>
              ))}
          </div>
        </div>

        {/* SharePoint Integration Box */}
        <div className={`mt-12 rounded-3xl border-2 bg-white/70 backdrop-blur-md shadow-xl px-7 py-8 flex flex-col items-center transition-all duration-300 ${getSharePointBoxColor()}`}>
          <div className="flex items-center mb-4 gap-3">
            <Share2 className="w-10 h-10 text-blue-700 bg-blue-100 p-2 rounded-full shadow" />
            <span className="text-2xl font-extrabold text-gray-700">
              SharePoint Integration
            </span>
          </div>
          <div className="flex items-center gap-2 mb-4 text-gray-600 text-sm">
            <FolderOpen className="w-5 h-5 text-violet-500" />
            <span className="font-semibold">Sync Folder:</span>
            <span className="truncate" title={SHAREPOINT_FOLDER_PATH}>
              {SHAREPOINT_FOLDER_PATH}
            </span>
            <ExternalLink className="w-4 h-4 text-blue-400" />
          </div>
          <div className="mb-3 text-center text-gray-500 text-xs">
            Validated documents will be moved to your SharePoint folder for organization-wide access.
          </div>
          <button
            onClick={handleSharePointSync}
            disabled={sharePointStatus === "syncing"}
            className="flex items-center gap-2 px-6 py-2 rounded-xl bg-blue-600 text-white font-bold shadow-lg hover:bg-blue-700 transition disabled:bg-gray-300 disabled:text-gray-400 disabled:shadow-none"
          >
            {sharePointStatus === "syncing" ? (
              <Loader2 className="w-5 h-5 animate-spin" />
            ) : (
              <Share2 className="w-5 h-5" />
            )}
            {sharePointStatus === "syncing" ? "Syncing..." : "Sync to SharePoint"}
          </button>
          {sharePointStatus === "success" && (
            <div className="flex items-center text-green-600 mt-3 text-sm">
              <CheckCircle className="w-5 h-5 mr-1" /> {sharePointMessage}
            </div>
          )}
          {sharePointStatus === "error" && (
            <div className="flex items-center text-red-600 mt-3 text-sm">
              <AlertTriangle className="w-5 h-5 mr-1" /> {sharePointMessage}
            </div>
          )}
          {sharePointStatus === "syncing" && (
            <div className="flex items-center text-blue-600 mt-3 text-sm">
              <Loader2 className="w-4 h-4 mr-1 animate-spin" /> {sharePointMessage}
            </div>
          )}
          {sharePointStatus === "idle" && sharePointMessage && (
            <div className="flex items-center text-gray-500 mt-3 text-sm">
              {sharePointMessage}
            </div>
          )}
        </div>
      </div>
    </div>
  );
}



