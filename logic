from langchain.vectorstores import Chroma
from langchain.schema import Document

def get_full_docs(query: str = None, filters: dict = None, k: int = 5):
    """
    Returns documents filtered by metadata and optionally by similarity to a query.
    
    Args:
        query (str): User query for similarity search. If None, returns all docs matching metadata.
        filters (dict): Metadata filters, e.g., {"standard_name": "3GPP TR 23.700-67"}
        k (int): Number of top documents to return for similarity search.
        
    Returns:
        list of tuples: [(doc_text, metadata), ...]
    """
    vectordb = Chroma(
        collection_name="standards_collection",
        embedding_function=embeddings,
        persist_directory=PATH_TO_VECTORSTORE,
    )

    # Use similarity search if query is provided
    if query:
        docs: list[Document] = vectordb.similarity_search(query=query, k=k, filter=filters or {})
        return [(d.page_content, d.metadata) for d in docs]

    # Else just fetch all documents matching metadata
    results = vectordb.get(include=["documents", "metadatas"], where=filters or {})
    return list(zip(results.get("documents", []), results.get("metadatas", [])))
