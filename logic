# 4) build filters and collect all docs for each filter via get_full_docs
        all_docs = []  # list of (doc_text, metadata)

        if standard_names:
            # normal flow when standard names exist
            for i, name in enumerate(standard_names):
                filters = {"standard_name": name}
                if i < len(standard_versions) and standard_versions[i]:
                    filters["standard_version"] = standard_versions[i]
                docs = get_full_docs(filters)
                all_docs.extend(docs)

        elif standard_versions:
            # only versions given
            for v in standard_versions:
                filters = {"standard_version": v}
                docs = get_full_docs(filters)
                all_docs.extend(docs)

        else:
            # ⚡ no metadata extracted → fallback rules
            if intent == "analyze_latest":
                # get the single most recent doc
                vectordb = Chroma(
                    collection_name="standards_collection",
                    embedding_function=embeddings,
                    persist_directory=PATH_TO_VECTORSTORE,
                )
                collection = vectordb._collection
                results = collection.get(include=["documents", "metadatas"])
                metadatas = results.get("metadatas", [])
                docs = results.get("documents", [])

                if metadatas and docs:
                    # sort by release_date if exists, else pick last one
                    sorted_items = sorted(
                        zip(docs, metadatas),
                        key=lambda x: x[1].get("release_date", ""),
                        reverse=True
                    )
                    all_docs.append(sorted_items[0])

            elif intent == "compare_versions":
                # fetch two latest versions of the same standard
                vectordb = Chroma(
                    collection_name="standards_collection",
                    embedding_function=embeddings,
                    persist_directory=PATH_TO_VECTORSTORE,
                )
                collection = vectordb._collection
                results = collection.get(include=["documents", "metadatas"])
                metadatas = results.get("metadatas", [])
                docs = results.get("documents", [])

                if metadatas and docs:
                    # group by standard_name
                    grouped = {}
                    for doc, meta in zip(docs, metadatas):
                        name = meta.get("standard_name")
                        if not name:
                            continue
                        grouped.setdefault(name, []).append((doc, meta))

                    # pick first standard with >= 2 versions
                    for name, items in grouped.items():
                        if len(items) >= 2:
                            # sort by release_date desc and take top 2
                            items_sorted = sorted(
                                items, key=lambda x: x[1].get("release_date", ""), reverse=True
                            )
                            all_docs.extend(items_sorted[:2])
                            break
