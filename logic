from langchain_core.prompts import ChatPromptTemplate
from langchain_openai import AzureChatOpenAI
import os

def build_entity_extractor():
    """
    Extracts metadata (standard_names, standard_versions, release_date) from user query.
    Returns JSON with keys: standard_names (list), standard_versions (list), release_date (string/null).
    If nothing found, lists can be empty and release_date null.
    """
    llm = AzureChatOpenAI(
        api_key=os.getenv("OPENAI_API_KEY"),
        api_version=os.getenv("OPENAI_VERSION"),
        azure_deployment=os.getenv("OPENAI_DEPLOYMENT"),
        azure_endpoint=os.getenv("OPENAI_BASE"),
        temperature=0
    )

    system_prompt = """You are an entity extractor for telecom standards queries.
From the user query, extract:

- standard_names: a list of all standard names mentioned (e.g., ["3GPP TR 23.700-67"]).
- standard_versions: a list of all versions mentioned. Normalize them to start with uppercase 'V' (e.g., "1.0.0" -> "V1.0.0", "v6.0.89" -> "V6.0.89").
- release_date: the release date if explicitly mentioned (e.g., "2025-04"), else null.

Return a single JSON object with keys: standard_names, standard_versions, release_date.
If something is not mentioned, lists can be empty and release_date should be null.
Only return valid JSON."""

    prompt = ChatPromptTemplate.from_messages([
        ("system", system_prompt),
        ("human", "{query}")
    ])

    return prompt | llm
